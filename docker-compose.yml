services:
  nginx:
    image: nginx:alpine
    container_name: vhs-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    build:
      context: ./nginx
      args:
        - NODE_ENV=production
      dockerfile: Dockerfile  
    environment:
      - NODE_ENV=production  

  # certbot:
  #   image: certbot/certbot
  #   volumes:
  #     - ./nginx/certbot/conf:/etc/letsencrypt
  #     - ./nginx/certbot/www:/var/www/certbot

  db:
    image: postgres:latest
    container_name: vhs-db
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - NODE_ENV=production  
    ports:
      - "5432:5432"
    volumes:
      - vhsdb_data:/var/lib/postgresql/data
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      args:
        - NODE_ENV=${NODE_ENV}

    container_name: vhs-backend
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DATABASE_URL: ${DATABASE_URL}
      PGUSER: ${DB_USER}
      PGPASSWORD: ${DB_PASSWORD}
      PGDATABASE: ${DB_NAME}
      PGHOST: ${DB_HOST}
      PGPORT: ${DB_PORT}
      NODE_ENV: ${NODE_ENV}
      NEWS_API_KEY: ${NEWS_API_KEY}
      # SMTP Configuration for Nodemailer
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURE: ${SMTP_SECURE}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM_NAME: ${SMTP_FROM_NAME}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}
      FRONTEND_URL: https://libronico.com
    depends_on:
      - db
    ports:
      - "4000:4000"
    networks:
      - app-network
    volumes:
      - ./backend/blocked_news_words.txt:/app/blocked_news_words.txt:ro

  frontend:
    build:
      context: ./frontend
      args:
        - NODE_ENV=${NODE_ENV}
    container_name: vhs-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_next_cache:/app/.next
    depends_on:
      - backend
    networks:
      - app-network
    environment:
      - NODE_ENV=${NODE_ENV}

volumes:
  vhsdb_data:
  frontend_next_cache:

networks:
  app-network:
    driver: bridge
