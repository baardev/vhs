services:
  nginx:
    image: nginx:alpine
    container_name: vhs-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
      - ./logs/nginx:/var/log/nginx  # needed to access the log files for Fail2Ban
    cap_add:
      - NET_ADMIN
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    build:
      context: ./nginx
      args:
        - NODE_ENV=${NODE_ENV}
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
    
  # certbot:
  #   image: certbot/certbot
  #   volumes:
  #     - ./nginx/certbot/conf:/etc/letsencrypt
  #     - ./nginx/certbot/www:/var/www/certbot
  
  fail2ban:
    image: fail2ban/fail2ban
    container_name: fail2ban
    volumes:
      - ./fail2ban:/etc/fail2ban
      - ./logs/nginx:/var/log/nginx:ro  # Fixed path to match nginx logs
    cap_add:
      - NET_ADMIN
    network_mode: "host"
    depends_on:
      - nginx
  
  db:
    image: postgres:latest
    container_name: vhs-db
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PORT=6541
      - NODE_ENV=${NODE_ENV}
    # IMPORTANT: Removed public port exposure
    # ports:
    #   - "5432:5432"
    # Use custom port 6541 internally instead of default 5432
    command: -p 6541
    volumes:
      - vhsdb_data:/var/lib/postgresql/data
      - ./db/config/.psqlrc:/root/.psqlrc
      # Add a custom pg_hba.conf with restricted access
      - ./db/config/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    networks:
      - app-network  # Your comment suggests db-network but using app-network
    restart: unless-stopped
    ports:
     - "127.0.0.1:6541:6541"
  
  backend:
    build:
      context: ./backend
      args:
        - NODE_ENV=${NODE_ENV}
    container_name: vhs-backend
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: db
      DB_PORT: 6541
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@db:6541/${DB_NAME}
      PGUSER: ${DB_USER}
      PGPASSWORD: ${DB_PASSWORD}
      PGDATABASE: ${DB_NAME}
      PGHOST: ${DB_HOST}
      PGPORT: 6541
      NODE_ENV: ${NODE_ENV}
      NEWS_API_KEY: ${NEWS_API_KEY}
      # SMTP Configuration for Nodemailer
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURE: ${SMTP_SECURE}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM_NAME: ${SMTP_FROM_NAME}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}
      FRONTEND_URL: https://libronico.com
    depends_on:
      - db
    ports:
      - "127.0.0.1:4000:4000"  # Restricted to localhost access only
    networks:
      - app-network  # For frontend access
    volumes:
      - ./backend/blocked_news_words.txt:/app/blocked_news_words.txt:ro
    restart: unless-stopped
  
  frontend:
    build:
      context: ./frontend
      args:
        - NODE_ENV=${NODE_ENV}
    container_name: vhs-frontend
    ports:
      - "3000:3000"  # Unrestricted by IP
    depends_on:
      - backend
    networks:
      - app-network  # Your comment suggests web-network
    environment:
      - NODE_ENV=${NODE_ENV}
      - NEXT_PUBLIC_HOSTNAME=libronico.com
      - NEXTAUTH_URL=https://libronico.com
      - NEXT_PUBLIC_BASE_URL=https://libronico.com
    restart: unless-stopped

volumes:
  vhsdb_data:
  frontend_next_cache:

networks:
  app-network:  # For public-facing services
    driver: bridge