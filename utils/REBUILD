#!/bin/bash
#
# REBUILD - Container Management and Deployment Utility
# ====================================================
#
# DESCRIPTION:
#   This script manages the rebuilding of Docker containers for the VHS
#   application. It can rebuild individual services or the entire stack,
#   with options for wiping containers, volumes, and restoring from backups.
#
# USAGE:
#   utils/REBUILD [--all] [--frontend] [--backend] [--nginx] [--db] [--wipe] [--restore]
#
# OPTIONS:
#   --all               Full rebuild of all containers
#   --frontend          Rebuild and restart only the frontend container
#   --backend           Rebuild and restart only the backend container
#   --nginx             Rebuild and restart only the nginx container
#   --db                Rebuild and restart only the PostgreSQL database
#   --wipe              Wipe all containers and volumes without rebuilding
#   --restore           Restore database from the most recent backup
#
# DEPENDENCIES:
#   - Docker and docker-compose
#   - CLEARCACHE utility script
#   - REBUILD_TABLES utility script
#   - IMPEX utility script (for restore functionality)
#
# NOTES:
#   - Without options, the script will display usage information
#   - The --all option rebuilds all containers in the correct order
#   - Each service option can be used independently to rebuild just that service
#   - The --restore option affects how the database is initialized
#
# EXAMPLES:
#   utils/REBUILD --all                # Full rebuild of all containers
#   utils/REBUILD --frontend           # Rebuild only the frontend container
#   utils/REBUILD --db --restore # Rebuild dbQL and restore from backup
#   utils/REBUILD --wipe               # Just clean containers without rebuilding
#
# AUTHOR:
#   VHS Development Team
#

echo "REBUILD $1"
echo "----------------------------------------------------"

cd ${ROOT_DIR}

# Parse command line arguments
ALL=false
REBUILD_FRONTEND=false
REBUILD_BACKEND=false
REBUILD_NGINX=false
REBUILD_DB=false
REBUILD_WIPE=false
REBUILD_RESTORE=false
LIVE=false
# COMPOSE_BAKE=true

# Use standard environment names
FILEARG="-f ${ROOT_DIR}/docker-compose.yml"
echo "Docker file: $FILEARG"


export NODE_ENV=production

# Function to wipe all containers and volumes
wipe_all() {
    echo "--------------------------------------------------------"
    echo -e "\033[0;32mWiping all containers and volumes...\033[0m"
    echo "--------------------------------------------------------"
    
    sudo chown -R 1000:1000 ${ROOT_DIR}/frontend/.next
    docker system prune -fa
    docker volume prune -fa
    
    echo -e "\033[0;32mClearing all caches...\033[0m"
    CLEARCACHE --all
    
    # Stop, remove, and delete any dev containers
    /usr/bin/docker ps --format "{{.Names}}"|grep dev|awk '{print "docker stop "$1}'|bash
    /usr/bin/docker ps --format "{{.Names}}"|grep dev|awk '{print "docker rm "$1}'|bash
    /usr/bin/docker ps --format "{{.Names}}"|grep dev|awk '{print "docker rmi "$1}'|bash
    
    # Stop, remove, and delete any buildx containers
    /usr/bin/docker ps --format "{{.Names}}"|grep buildx|awk '{print "docker stop "$1}'|bash
    /usr/bin/docker ps --format "{{.Names}}"|grep buildx|awk '{print "docker rm "$1}'|bash
    /usr/bin/docker ps --format "{{.Names}}"|grep buildx|awk '{print "docker rmi "$1}'|bash
    
    echo -e "\033[0;32mAll containers and volumes wiped successfully\033[0m"
}

# Function to rebuild frontend
rebuild_frontend() {

    if [ ! -f "${ROOT_DIR}/frontend/package-lock.json" ]; then
        cd ${ROOT_DIR}/frontend
        npm install
    fi

    
    echo "--------------------------------------------------------"
    echo "Clearing frontend cache..."
    echo "--------------------------------------------------------"
    CLEARCACHE --frontend

    echo "Restarting frontend container..."
    /usr/bin/docker compose ${FILEARG} stop frontend
    /usr/bin/docker compose ${FILEARG} build --build-arg NODE_ENV=${NODE_ENV} frontend
    /usr/bin/docker compose ${FILEARG} up -d frontend
    echo "Frontend container restarted successfully."
}

# Function to rebuild backend
rebuild_backend() {

    if [ ! -f "${ROOT_DIR}/backend/package-lock.json" ]; then
        cd ${ROOT_DIR}/backend
        npm install

    fi
    echo "--------------------------------------------------------"
    echo "Clearing backend cache..."
    echo "--------------------------------------------------------"
    CLEARCACHE --backend

    echo "Completely wiping backend server..."
    /usr/bin/docker compose ${FILEARG} stop backend
    /usr/bin/docker ps --format "{{.Names}}"|grep backend|awk '{print "docker rm -f "$1}'|bash
    /usr/bin/docker images --format "{{.Repository}}:{{.Tag}}"|grep backend|awk '{print "docker rmi -f "$1}'|bash

    # Make sure DB is running before rebuilding backend
    echo "Ensuring database container is running..."
    /usr/bin/docker compose ${FILEARG} up -d db
    
    # Add a wait for DB to be ready
    echo "Waiting for database to be ready..."
    sleep 10  # Give DB time to initialize
    
    echo "Rebuilding backend from scratch..."
    /usr/bin/docker compose ${FILEARG} build --no-cache --build-arg NODE_ENV=${NODE_ENV} backend
    /usr/bin/docker compose ${FILEARG} up -d backend
    
    echo "Backend server completely wiped and rebuilt successfully."
    
    # Wait a bit longer for backend to connect to database
    echo "Waiting for services to stabilize..."
    sleep 5
    
    # Get the actual database container name
    DB_CONTAINER=$(docker ps --format "{{.Names}}" | grep db | head -n 1)
    if [ -z "$DB_CONTAINER" ]; then
        echo "Database container not found"
        docker ps
        exit 1
    fi
    
    # Now rebuild tables using the container name
    utils/REBUILD_TABLES ${RESTORE}
}

# Function to rebuild nginx
rebuild_nginx() {
    echo "--------------------------------------------------------"
    echo "Rebuilding nginx only..."
    echo "--------------------------------------------------------"

    /usr/bin/docker compose ${FILEARG} stop nginx
    /usr/bin/docker compose ${FILEARG} rm -f nginx

    # Build JUST the nginx image (no other targets)
    /usr/bin/docker compose ${FILEARG} build --no-cache --pull nginx

    # Start nginx without starting any dependency chain
    /usr/bin/docker compose ${FILEARG} up -d --no-deps nginx

    echo "Nginx rebuilt and restarted."
}

# Function to rebuild db
rebuild_db() {

# # Stop & remove the old container
# docker compose stop db
# docker compose rm -f db

# # Delete the named volume (actual projectâ€‘prefixed name is shown by `docker volume ls`)
# docker volume rm $(docker volume ls -q | grep vhsdb_data)

# # Start a fresh 17.x container
# docker compose up -d db





    echo "--------------------------------------------------------"
    echo "Completely wiping PostgreSQL database..."
    echo "--------------------------------------------------------"
    
    # Get the actual database container name for backup before wiping
    DB_CONTAINER=$(docker ps --format "{{.Names}}" | grep db | head -n 1)
    if [ ! -z "$DB_CONTAINER" ]; then
        # Backup existing database before wiping
        echo "Backing up existing database..."
        utils/IMPEX --export
    fi
    
    # Stop and remove the container
    /usr/bin/docker compose ${FILEARG} stop db
    /usr/bin/docker ps --format "{{.Names}}"|grep db|awk '{print "docker rm -f "$1}'|bash
    
    # Remove database volume to ensure clean start
    echo "Removing database volume..."
    docker volume rm $(docker volume ls -q | grep vhsdb_data) 2>/dev/null || true
    docker volume prune -f
    
    echo "Rebuilding PostgreSQL from scratch (using latest image)..."
    /usr/bin/docker compose ${FILEARG} pull db
    /usr/bin/docker compose ${FILEARG} up -d --force-recreate db
    
    echo "Waiting 5 seconds for database to initialize..."
    sleep 5
    
    # Get the actual database container name
    DB_CONTAINER=$(docker ps --format "{{.Names}}" | grep db | head -n 1)
    # Ensure the database container is running; if not, attempt to start it
    if [ -z "$DB_CONTAINER" ]; then
        echo "Database container is not running. Attempting to start it..."
        /usr/bin/docker compose ${FILEARG} up -d db
        echo "Waiting for database container to start..."
        sleep 10
        DB_CONTAINER=$(docker ps --format "{{.Names}}" | grep db | head -n 1)
        if [ -z "$DB_CONTAINER" ]; then
            echo "Failed to start the database container. See docker ps output below:"
            docker ps
            exit 1
        fi
        echo "Database container started successfully: $DB_CONTAINER"
    fi
    
    echo "Creating fresh database schema and initial data..."
    # /usr/bin/docker compose ${FILEARG} up -d backend
    utils/REBUILD_TABLES

    if [ "$RESTORE" = "--restore" ]; then
        echo "Restoring database from backup..."
        utils/IMPEX --import
    fi
    echo "PostgreSQL database completely wiped and rebuilt successfully."
}

while [[ $# -gt 0 ]]; do
    case "$1" in
        --all)
            ALL=true
            shift
            ;;
        --frontend)
            REBUILD_FRONTEND=true
            shift
            ;;
        --backend)
            REBUILD_BACKEND=true
            shift
            ;;
        --nginx)
            REBUILD_NGINX=true
            shift
            ;;
        --db)
            REBUILD_DB=true
            shift
            ;;
        --wipe)
            REBUILD_WIPE=true
            shift
            ;;
        --restore)
            REBUILD_RESTORE=true
            shift
            ;;
        *)
            # Unknown option
            echo "Unknown option: $1"
            echo "Usage: ./REBUILD [--all] [--frontend] [--backend] [--nginx] [--db] [--wipe] [--restore]"
            exit 1
            ;;
    esac
done

# Set RESTORE variable based on REBUILD_RESTORE flag
if $REBUILD_RESTORE; then
    RESTORE="--restore"
else
    RESTORE=""
fi

if $REBUILD_FRONTEND; then
    rebuild_frontend
    exit 0
fi

if $REBUILD_BACKEND; then
    rebuild_backend
    exit 0
fi

if $REBUILD_NGINX; then
    rebuild_nginx
    exit 0
fi

if $REBUILD_DB; then
    rebuild_db
    exit 0
fi

if $REBUILD_WIPE; then
    wipe_all
    exit 0
fi
if $REBUILD_RESTORE; then
    utils/REBUILD_TABLES ${RESTORE}
    exit 0
fi

if $ALL; then
    # Call the wipe function first
    wipe_all
    
    echo -e "\033[0;32mConfiguring buildx...\033[0m"
    /usr/bin/docker buildx create --use
    
    # Rebuild db first to ensure database is ready for other services
    echo -e "\033[0;32mRebuilding dbQL...\033[0m"
    rebuild_db
    
    # Now rebuild the other services
    echo -e "\033[0;32mRebuilding Backend...\033[0m"
    rebuild_backend
    
    echo -e "\033[0;32mRebuilding Frontend...\033[0m"
    rebuild_frontend
    
    echo -e "\033[0;32mRebuilding Nginx...\033[0m"
    rebuild_nginx
    
    echo -e "\033[0;32mAll containers rebuilt successfully\033[0m"
    /usr/bin/docker compose ${FILEARG} ps
else
    echo "No options specified. Use one of the following:"
    echo "  --all               Full rebuild of all containers"
    echo "  --frontend          Rebuild and restart only the frontend container"
    echo "  --backend           Rebuild and restart only the backend container"
    echo "  --nginx             Rebuild and restart only the nginx container"
    echo "  --db          Rebuild and restart only the dbQL database"
    echo "  --wipe              Wipe all containers and volumes without rebuilding"
    echo ""
    echo "Usage: ./REBUILD [--all] [--frontend] [--backend] [--nginx] [--db] [--wipe] [--restore]"
    exit 1
fi